buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
        maven {
            name = "Velocity"
            url = "https://repo.velocitypowered.com/snapshots/"
        }
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
}

apply plugin: 'org.spongepowered.mixin'

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // 设置本地库路径
            jvmArg "-Dceres.libdeflate_path=${buildDir}/natives/libdeflate_jni.dll"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = "Velocity"
        url = "https://repo.velocitypowered.com/snapshots/"
    }
    mavenCentral()
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    implementation "com.velocitypowered:velocity-native:3.4.0-SNAPSHOT"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

// 创建natives目录
task createNativesDir {
    doLast {
        mkdir "${buildDir}/natives"
    }
}

// 复制本地库文件到构建目录
task copyNatives(type: Copy, dependsOn: createNativesDir) {
    from "src/main/resources/windows/x86_64"
    include "libdeflate_jni.dll"
    into "${buildDir}/natives"
}

// 确保在处理资源之前复制本地库
processResources {
    dependsOn copyNatives

    // 设置重复处理策略
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
                             forge_version       : forge_version, forge_version_range: forge_version_range,
                             loader_version_range: loader_version_range,
                             mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
                             mod_authors         : mod_authors, mod_description: mod_description,]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}


tasks.named('jar', Jar).configure {

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes(["Specification-Title"     : mod_id,
                    "Specification-Vendor"    : mod_authors,
                    "Specification-Version"   : "1",
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : mod_authors,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }

    finalizedBy 'reobfJar'
}

// 添加一个任务来验证本地库文件是否存在
task checkNativeLibraries {
    doLast {
        def windowsLib = file("src/main/resources/windows/x86_64/libdeflate_jni.dll")
        if (!windowsLib.exists()) {
            logger.warn("WARNING: Windows native library not found at: ${windowsLib.absolutePath}")
        } else {
            logger.lifecycle("Found Windows native library at: ${windowsLib.absolutePath}")
        }
    }
}

build.dependsOn checkNativeLibraries

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
